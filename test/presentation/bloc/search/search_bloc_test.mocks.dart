// Mocks generated by Mockito 5.3.2 from annotations
// in search_images/test/presentation/bloc/search/search_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:search_images/core/error/failures.dart' as _i6;
import 'package:search_images/core/usecases/usecase.dart' as _i10;
import 'package:search_images/domain/entities/search_image.dart' as _i7;
import 'package:search_images/domain/repositories/cached_image_repository.dart'
    as _i4;
import 'package:search_images/domain/repositories/search_image_repository.dart'
    as _i3;
import 'package:search_images/domain/usecases/get_cached_image_usecase.dart'
    as _i9;
import 'package:search_images/domain/usecases/get_search_image_usecase.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchImageRepository_1 extends _i1.SmartFake
    implements _i3.SearchImageRepository {
  _FakeSearchImageRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCachedImageRepository_2 extends _i1.SmartFake
    implements _i4.CachedImageRepository {
  _FakeCachedImageRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SearchImageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchImageRepository extends _i1.Mock
    implements _i3.SearchImageRepository {
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>> getImages(
          _i8.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImages,
          [params],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.SearchImage>>(
          this,
          Invocation.method(
            #getImages,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.SearchImage>>(
          this,
          Invocation.method(
            #getImages,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>);
}

/// A class which mocks [CachedImageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCachedImageRepository extends _i1.Mock
    implements _i4.CachedImageRepository {
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>> getImages() =>
      (super.noSuchMethod(
        Invocation.method(
          #getImages,
          [],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.SearchImage>>(
          this,
          Invocation.method(
            #getImages,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.SearchImage>>(
          this,
          Invocation.method(
            #getImages,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>> addImage(
          _i7.SearchImage? image) =>
      (super.noSuchMethod(
        Invocation.method(
          #addImage,
          [image],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.SearchImage>>(
          this,
          Invocation.method(
            #addImage,
            [image],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.SearchImage>>(
          this,
          Invocation.method(
            #addImage,
            [image],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>> removeImage(
          _i7.SearchImage? image) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeImage,
          [image],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.SearchImage>>(
          this,
          Invocation.method(
            #removeImage,
            [image],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.SearchImage>>(
          this,
          Invocation.method(
            #removeImage,
            [image],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>);
}

/// A class which mocks [GetSearchImageUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSearchImageUsecase extends _i1.Mock
    implements _i8.GetSearchImageUsecase {
  @override
  _i3.SearchImageRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeSearchImageRepository_1(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeSearchImageRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.SearchImageRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>> call(
          _i8.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.SearchImage>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.SearchImage>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>);
}

/// A class which mocks [GetCachedImageUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCachedImageUsecase extends _i1.Mock
    implements _i9.GetCachedImageUsecase {
  @override
  _i4.CachedImageRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCachedImageRepository_2(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeCachedImageRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.CachedImageRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>> call(
          _i10.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.SearchImage>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.SearchImage>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i7.SearchImage>>>);
}
